/**
 * Copyright (C) 2013 - 2015 Open WhisperSystems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
syntax = "proto2";
package textsecure;

option java_package = "org.whispersystems.textsecuregcm.entities";
option java_outer_classname = "MessageProtos";

message Envelope {
  enum Type {
    UNKNOWN             = 0;
    CIPHERTEXT          = 1;
    KEY_EXCHANGE        = 2;
    PREKEY_BUNDLE       = 3;
    RECEIPT             = 5;
    UNIDENTIFIED_SENDER = 6;
    MATCHING_MESSAGE    = 7;
    PROFESSIONAL_STATUS = 8;
    RECORDING_CONSENT   = 9;
  }

  optional Type   type             = 1;
  optional string source           = 2;
  optional string sourceUuid       = 11;
  optional uint32 sourceDevice     = 7;
  optional string relay            = 3;
  optional uint64 timestamp        = 5;
  optional bytes  legacyMessage    = 6; // Contains an encrypted DataMessage XXX -- Remove after 10/01/15
  optional bytes  content          = 8; // Contains an encrypted Content
  optional string serverGuid       = 9;
  optional uint64 server_timestamp = 10;
  optional MatchingMessage  matchingMessage = 12;
  optional ProfessionalStatusMessage  professionalStatusMessage = 14;
  optional RecordingConsentMessage    recordingConsentMessage = 15;
}
message Content {
  optional CallMessage    callMessage    = 3;
}

message CallMessage {
  message Offer {
    enum Type {
      OFFER_AUDIO_CALL                   = 0;
      OFFER_VIDEO_CALL                   = 1;
      reserved /* OFFER_NEED_PERMISSION */ 2; // removed
    }

    optional uint64 id     = 1;
    // Legacy/deprecated; replaced by 'opaque'
    optional string sdp    = 2;
    optional Type   type   = 3;
    optional bytes  opaque = 4;
  }

  message Answer {
    optional uint64 id     = 1;
    // Legacy/deprecated; replaced by 'opaque'
    optional string sdp    = 2;
    optional bytes  opaque = 3;
  }

  message IceUpdate {
    optional uint64 id     = 1;
    // Legacy/deprecated; remove when old clients are gone.
    optional string mid    = 2;
    // Legacy/deprecated; remove when old clients are gone.
    optional uint32 line   = 3;
    // Legacy/deprecated; replaced by 'opaque'
    optional string sdp    = 4;
    optional bytes  opaque = 5;
  }

  message Busy {
    optional uint64 id = 1;
  }

  message Hangup {
    enum Type {
      HANGUP_NORMAL          = 0;
      HANGUP_ACCEPTED        = 1;
      HANGUP_DECLINED        = 2;
      HANGUP_BUSY            = 3;
      HANGUP_NEED_PERMISSION = 4;
    }

    optional uint64 id       = 1;
    optional Type   type     = 2;
    optional uint32 deviceId = 3;
  }

  message Opaque {
    optional bytes data = 1;
  }

  optional Offer     offer               = 1;
  optional Answer    answer              = 2;
  repeated IceUpdate iceUpdate           = 3;
  optional Hangup    legacyHangup        = 4;
  optional Busy      busy                = 5;
  reserved        /* profileKey */         6;
  optional Hangup    hangup              = 7;
  optional bool      multiRing           = 8;
  optional uint32    destinationDeviceId = 9;
  optional Opaque    opaque              = 10;
}
message ProfessionalStatusMessage {
  repeated ProfessionalMessage professionalMessage = 1;

}
message ProfessionalMessage {
  optional string uuid = 1;
  optional string status = 2;
}

message RecordingConsentMessage { 
  optional string uuid      = 1;
  optional string callId    = 2;
  optional string type      = 3;
}

message MatchingMessage {
  optional string uuid = 1;
  repeated uint32 matchingKeyword = 2;
  optional string number = 3;
  optional bool isCaller = 4;
  optional string callId = 5;
  optional bool followEnable = 6;
  optional string unidentifiedAccess = 7;
  optional string profileKey         = 8;
}

message ProvisioningUuid {
  optional string uuid = 1;
}

message ServerCertificate {
    message Certificate {
        optional uint32 id  = 1;
        optional bytes  key = 2;
    }

    optional bytes certificate = 1;
    optional bytes signature   = 2;
}

message SenderCertificate {
    message Certificate {
        optional string            sender        = 1;
        optional string            senderUuid    = 6;
        optional uint32            senderDevice  = 2;
        optional fixed64           expires       = 3;
        optional bytes             identityKey   = 4;
        optional ServerCertificate signer        = 5;
    }

    optional bytes certificate = 1;
    optional bytes signature   = 2;
}
